name: PR Docker Build

on:
  pull_request:
    branches: [ "main" ]

jobs:

  lint_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
      
      - name: Install dependencies
        run: npm ci  # Or use the appropriate command for your project

      - name: Lint code
        run: npm run lint  # Or use the appropriate command for linting

      # - name: Run tests
      #   run: npm test  # Or use the appropriate command for testing

  build_and_publish:
    runs-on: ubuntu-latest
    needs: lint_and_test
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build the Docker image
        run: |
          docker buildx build \
            --cache-to type=local,dest=/tmp/.buildx-cache \
            --cache-from type=local,src=/tmp/.buildx-cache \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/tmc-backend:latest .
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled

      # - name: Login to Docker Hub
      #   run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }} docker.io

      # - name: Publish image to Docker Hub
      #   run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/tmc-backend:latest

  deploy:
    runs-on: [aws-ec2]
    needs: build_and_publish
    if: success()  # Only deploy if the build and publish were successful
    steps:
      - name: Manual approval
        if: github.event_name == 'pull_request'
        uses: tzkhan/approval-workflow@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          approval-comment: 'The deployment has been approved by the repository owner.'
          approval-label: 'deployment-approved'
      
      # - name: Stop old container
      #   run: |
      #     CONTAINER_ID=$(docker ps -q -f name=tmc-backend-container)
      #     if [ -z "$CONTAINER_ID" ]; then
      #       echo "Container not found. Skipping stop action."
      #       exit 0
      #     else
      #       echo "Container found. Stopping..."
      #       docker stop tmc-backend-container
      #       echo "Container stopped."
      #     fi
      #   shell: bash

      # - name: Delete old container
      #   run: |
      #     docker rm -f tmc-backend-container

      # - name: Remove old Docker images
      #   run: |
      #     docker images -q ${{ secrets.DOCKERHUB_USERNAME }}/tmc-backend | xargs -I {} docker rmi {}
      #   shell: bash

      # - name: Pull image from Docker Hub
      #   run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/tmc-backend:latest

      - name: Create .env file locally
        run: |
          touch .env
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" > .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "TMC_API_CONFIG_KEY=${{ secrets.TMC_API_CONFIG_KEY }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          # Add more environment variables as needed

      # - name: Run docker container
      #   run: |
      #     docker run -d -p 4000:4000 \
      #       --env-file .env \
      #       --name tmc-backend-container \
      #       ${{ secrets.DOCKERHUB_USERNAME }}/tmc-backend
